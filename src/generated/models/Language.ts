
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Language` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Language
 * 
 */
export type LanguageModel = runtime.Types.Result.DefaultSelection<Prisma.$LanguagePayload>

export type AggregateLanguage = {
  _count: LanguageCountAggregateOutputType | null
  _avg: LanguageAvgAggregateOutputType | null
  _sum: LanguageSumAggregateOutputType | null
  _min: LanguageMinAggregateOutputType | null
  _max: LanguageMaxAggregateOutputType | null
}

export type LanguageAvgAggregateOutputType = {
  id: number | null
}

export type LanguageSumAggregateOutputType = {
  id: number | null
}

export type LanguageMinAggregateOutputType = {
  id: number | null
  name: string | null
}

export type LanguageMaxAggregateOutputType = {
  id: number | null
  name: string | null
}

export type LanguageCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type LanguageAvgAggregateInputType = {
  id?: true
}

export type LanguageSumAggregateInputType = {
  id?: true
}

export type LanguageMinAggregateInputType = {
  id?: true
  name?: true
}

export type LanguageMaxAggregateInputType = {
  id?: true
  name?: true
}

export type LanguageCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type LanguageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Language to aggregate.
   */
  where?: Prisma.LanguageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Languages to fetch.
   */
  orderBy?: Prisma.LanguageOrderByWithRelationInput | Prisma.LanguageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LanguageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Languages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Languages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Languages
  **/
  _count?: true | LanguageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LanguageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LanguageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LanguageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LanguageMaxAggregateInputType
}

export type GetLanguageAggregateType<T extends LanguageAggregateArgs> = {
      [P in keyof T & keyof AggregateLanguage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLanguage[P]>
    : Prisma.GetScalarType<T[P], AggregateLanguage[P]>
}




export type LanguageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LanguageWhereInput
  orderBy?: Prisma.LanguageOrderByWithAggregationInput | Prisma.LanguageOrderByWithAggregationInput[]
  by: Prisma.LanguageScalarFieldEnum[] | Prisma.LanguageScalarFieldEnum
  having?: Prisma.LanguageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LanguageCountAggregateInputType | true
  _avg?: LanguageAvgAggregateInputType
  _sum?: LanguageSumAggregateInputType
  _min?: LanguageMinAggregateInputType
  _max?: LanguageMaxAggregateInputType
}

export type LanguageGroupByOutputType = {
  id: number
  name: string | null
  _count: LanguageCountAggregateOutputType | null
  _avg: LanguageAvgAggregateOutputType | null
  _sum: LanguageSumAggregateOutputType | null
  _min: LanguageMinAggregateOutputType | null
  _max: LanguageMaxAggregateOutputType | null
}

type GetLanguageGroupByPayload<T extends LanguageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LanguageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LanguageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LanguageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LanguageGroupByOutputType[P]>
      }
    >
  >



export type LanguageWhereInput = {
  AND?: Prisma.LanguageWhereInput | Prisma.LanguageWhereInput[]
  OR?: Prisma.LanguageWhereInput[]
  NOT?: Prisma.LanguageWhereInput | Prisma.LanguageWhereInput[]
  id?: Prisma.IntFilter<"Language"> | number
  name?: Prisma.StringNullableFilter<"Language"> | string | null
  movies?: Prisma.MovieListRelationFilter
}

export type LanguageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  movies?: Prisma.MovieOrderByRelationAggregateInput
}

export type LanguageWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.LanguageWhereInput | Prisma.LanguageWhereInput[]
  OR?: Prisma.LanguageWhereInput[]
  NOT?: Prisma.LanguageWhereInput | Prisma.LanguageWhereInput[]
  name?: Prisma.StringNullableFilter<"Language"> | string | null
  movies?: Prisma.MovieListRelationFilter
}, "id">

export type LanguageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.LanguageCountOrderByAggregateInput
  _avg?: Prisma.LanguageAvgOrderByAggregateInput
  _max?: Prisma.LanguageMaxOrderByAggregateInput
  _min?: Prisma.LanguageMinOrderByAggregateInput
  _sum?: Prisma.LanguageSumOrderByAggregateInput
}

export type LanguageScalarWhereWithAggregatesInput = {
  AND?: Prisma.LanguageScalarWhereWithAggregatesInput | Prisma.LanguageScalarWhereWithAggregatesInput[]
  OR?: Prisma.LanguageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LanguageScalarWhereWithAggregatesInput | Prisma.LanguageScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Language"> | number
  name?: Prisma.StringNullableWithAggregatesFilter<"Language"> | string | null
}

export type LanguageCreateInput = {
  name?: string | null
  movies?: Prisma.MovieCreateNestedManyWithoutLanguagesInput
}

export type LanguageUncheckedCreateInput = {
  id?: number
  name?: string | null
  movies?: Prisma.MovieUncheckedCreateNestedManyWithoutLanguagesInput
}

export type LanguageUpdateInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  movies?: Prisma.MovieUpdateManyWithoutLanguagesNestedInput
}

export type LanguageUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  movies?: Prisma.MovieUncheckedUpdateManyWithoutLanguagesNestedInput
}

export type LanguageCreateManyInput = {
  id?: number
  name?: string | null
}

export type LanguageUpdateManyMutationInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type LanguageUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type LanguageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type LanguageAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type LanguageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type LanguageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type LanguageSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type LanguageNullableScalarRelationFilter = {
  is?: Prisma.LanguageWhereInput | null
  isNot?: Prisma.LanguageWhereInput | null
}

export type LanguageCreateNestedOneWithoutMoviesInput = {
  create?: Prisma.XOR<Prisma.LanguageCreateWithoutMoviesInput, Prisma.LanguageUncheckedCreateWithoutMoviesInput>
  connectOrCreate?: Prisma.LanguageCreateOrConnectWithoutMoviesInput
  connect?: Prisma.LanguageWhereUniqueInput
}

export type LanguageUpdateOneWithoutMoviesNestedInput = {
  create?: Prisma.XOR<Prisma.LanguageCreateWithoutMoviesInput, Prisma.LanguageUncheckedCreateWithoutMoviesInput>
  connectOrCreate?: Prisma.LanguageCreateOrConnectWithoutMoviesInput
  upsert?: Prisma.LanguageUpsertWithoutMoviesInput
  disconnect?: Prisma.LanguageWhereInput | boolean
  delete?: Prisma.LanguageWhereInput | boolean
  connect?: Prisma.LanguageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LanguageUpdateToOneWithWhereWithoutMoviesInput, Prisma.LanguageUpdateWithoutMoviesInput>, Prisma.LanguageUncheckedUpdateWithoutMoviesInput>
}

export type LanguageCreateWithoutMoviesInput = {
  name?: string | null
}

export type LanguageUncheckedCreateWithoutMoviesInput = {
  id?: number
  name?: string | null
}

export type LanguageCreateOrConnectWithoutMoviesInput = {
  where: Prisma.LanguageWhereUniqueInput
  create: Prisma.XOR<Prisma.LanguageCreateWithoutMoviesInput, Prisma.LanguageUncheckedCreateWithoutMoviesInput>
}

export type LanguageUpsertWithoutMoviesInput = {
  update: Prisma.XOR<Prisma.LanguageUpdateWithoutMoviesInput, Prisma.LanguageUncheckedUpdateWithoutMoviesInput>
  create: Prisma.XOR<Prisma.LanguageCreateWithoutMoviesInput, Prisma.LanguageUncheckedCreateWithoutMoviesInput>
  where?: Prisma.LanguageWhereInput
}

export type LanguageUpdateToOneWithWhereWithoutMoviesInput = {
  where?: Prisma.LanguageWhereInput
  data: Prisma.XOR<Prisma.LanguageUpdateWithoutMoviesInput, Prisma.LanguageUncheckedUpdateWithoutMoviesInput>
}

export type LanguageUpdateWithoutMoviesInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type LanguageUncheckedUpdateWithoutMoviesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type LanguageCountOutputType
 */

export type LanguageCountOutputType = {
  movies: number
}

export type LanguageCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  movies?: boolean | LanguageCountOutputTypeCountMoviesArgs
}

/**
 * LanguageCountOutputType without action
 */
export type LanguageCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LanguageCountOutputType
   */
  select?: Prisma.LanguageCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LanguageCountOutputType without action
 */
export type LanguageCountOutputTypeCountMoviesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MovieWhereInput
}


export type LanguageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  movies?: boolean | Prisma.Language$moviesArgs<ExtArgs>
  _count?: boolean | Prisma.LanguageCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["language"]>

export type LanguageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["language"]>

export type LanguageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["language"]>

export type LanguageSelectScalar = {
  id?: boolean
  name?: boolean
}

export type LanguageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["language"]>
export type LanguageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  movies?: boolean | Prisma.Language$moviesArgs<ExtArgs>
  _count?: boolean | Prisma.LanguageCountOutputTypeDefaultArgs<ExtArgs>
}
export type LanguageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type LanguageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $LanguagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Language"
  objects: {
    movies: Prisma.$MoviePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string | null
  }, ExtArgs["result"]["language"]>
  composites: {}
}

export type LanguageGetPayload<S extends boolean | null | undefined | LanguageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LanguagePayload, S>

export type LanguageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LanguageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LanguageCountAggregateInputType | true
  }

export interface LanguageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Language'], meta: { name: 'Language' } }
  /**
   * Find zero or one Language that matches the filter.
   * @param {LanguageFindUniqueArgs} args - Arguments to find a Language
   * @example
   * // Get one Language
   * const language = await prisma.language.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LanguageFindUniqueArgs>(args: Prisma.SelectSubset<T, LanguageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Language that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LanguageFindUniqueOrThrowArgs} args - Arguments to find a Language
   * @example
   * // Get one Language
   * const language = await prisma.language.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LanguageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LanguageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Language that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanguageFindFirstArgs} args - Arguments to find a Language
   * @example
   * // Get one Language
   * const language = await prisma.language.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LanguageFindFirstArgs>(args?: Prisma.SelectSubset<T, LanguageFindFirstArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Language that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanguageFindFirstOrThrowArgs} args - Arguments to find a Language
   * @example
   * // Get one Language
   * const language = await prisma.language.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LanguageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LanguageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Languages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanguageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Languages
   * const languages = await prisma.language.findMany()
   * 
   * // Get first 10 Languages
   * const languages = await prisma.language.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const languageWithIdOnly = await prisma.language.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LanguageFindManyArgs>(args?: Prisma.SelectSubset<T, LanguageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Language.
   * @param {LanguageCreateArgs} args - Arguments to create a Language.
   * @example
   * // Create one Language
   * const Language = await prisma.language.create({
   *   data: {
   *     // ... data to create a Language
   *   }
   * })
   * 
   */
  create<T extends LanguageCreateArgs>(args: Prisma.SelectSubset<T, LanguageCreateArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Languages.
   * @param {LanguageCreateManyArgs} args - Arguments to create many Languages.
   * @example
   * // Create many Languages
   * const language = await prisma.language.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LanguageCreateManyArgs>(args?: Prisma.SelectSubset<T, LanguageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Languages and returns the data saved in the database.
   * @param {LanguageCreateManyAndReturnArgs} args - Arguments to create many Languages.
   * @example
   * // Create many Languages
   * const language = await prisma.language.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Languages and only return the `id`
   * const languageWithIdOnly = await prisma.language.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LanguageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LanguageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Language.
   * @param {LanguageDeleteArgs} args - Arguments to delete one Language.
   * @example
   * // Delete one Language
   * const Language = await prisma.language.delete({
   *   where: {
   *     // ... filter to delete one Language
   *   }
   * })
   * 
   */
  delete<T extends LanguageDeleteArgs>(args: Prisma.SelectSubset<T, LanguageDeleteArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Language.
   * @param {LanguageUpdateArgs} args - Arguments to update one Language.
   * @example
   * // Update one Language
   * const language = await prisma.language.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LanguageUpdateArgs>(args: Prisma.SelectSubset<T, LanguageUpdateArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Languages.
   * @param {LanguageDeleteManyArgs} args - Arguments to filter Languages to delete.
   * @example
   * // Delete a few Languages
   * const { count } = await prisma.language.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LanguageDeleteManyArgs>(args?: Prisma.SelectSubset<T, LanguageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Languages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanguageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Languages
   * const language = await prisma.language.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LanguageUpdateManyArgs>(args: Prisma.SelectSubset<T, LanguageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Languages and returns the data updated in the database.
   * @param {LanguageUpdateManyAndReturnArgs} args - Arguments to update many Languages.
   * @example
   * // Update many Languages
   * const language = await prisma.language.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Languages and only return the `id`
   * const languageWithIdOnly = await prisma.language.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LanguageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LanguageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Language.
   * @param {LanguageUpsertArgs} args - Arguments to update or create a Language.
   * @example
   * // Update or create a Language
   * const language = await prisma.language.upsert({
   *   create: {
   *     // ... data to create a Language
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Language we want to update
   *   }
   * })
   */
  upsert<T extends LanguageUpsertArgs>(args: Prisma.SelectSubset<T, LanguageUpsertArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Languages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanguageCountArgs} args - Arguments to filter Languages to count.
   * @example
   * // Count the number of Languages
   * const count = await prisma.language.count({
   *   where: {
   *     // ... the filter for the Languages we want to count
   *   }
   * })
  **/
  count<T extends LanguageCountArgs>(
    args?: Prisma.Subset<T, LanguageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LanguageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Language.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LanguageAggregateArgs>(args: Prisma.Subset<T, LanguageAggregateArgs>): Prisma.PrismaPromise<GetLanguageAggregateType<T>>

  /**
   * Group by Language.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LanguageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LanguageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LanguageGroupByArgs['orderBy'] }
      : { orderBy?: LanguageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LanguageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Language model
 */
readonly fields: LanguageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Language.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LanguageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  movies<T extends Prisma.Language$moviesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Language$moviesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Language model
 */
export interface LanguageFieldRefs {
  readonly id: Prisma.FieldRef<"Language", 'Int'>
  readonly name: Prisma.FieldRef<"Language", 'String'>
}
    

// Custom InputTypes
/**
 * Language findUnique
 */
export type LanguageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * Filter, which Language to fetch.
   */
  where: Prisma.LanguageWhereUniqueInput
}

/**
 * Language findUniqueOrThrow
 */
export type LanguageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * Filter, which Language to fetch.
   */
  where: Prisma.LanguageWhereUniqueInput
}

/**
 * Language findFirst
 */
export type LanguageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * Filter, which Language to fetch.
   */
  where?: Prisma.LanguageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Languages to fetch.
   */
  orderBy?: Prisma.LanguageOrderByWithRelationInput | Prisma.LanguageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Languages.
   */
  cursor?: Prisma.LanguageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Languages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Languages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Languages.
   */
  distinct?: Prisma.LanguageScalarFieldEnum | Prisma.LanguageScalarFieldEnum[]
}

/**
 * Language findFirstOrThrow
 */
export type LanguageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * Filter, which Language to fetch.
   */
  where?: Prisma.LanguageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Languages to fetch.
   */
  orderBy?: Prisma.LanguageOrderByWithRelationInput | Prisma.LanguageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Languages.
   */
  cursor?: Prisma.LanguageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Languages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Languages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Languages.
   */
  distinct?: Prisma.LanguageScalarFieldEnum | Prisma.LanguageScalarFieldEnum[]
}

/**
 * Language findMany
 */
export type LanguageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * Filter, which Languages to fetch.
   */
  where?: Prisma.LanguageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Languages to fetch.
   */
  orderBy?: Prisma.LanguageOrderByWithRelationInput | Prisma.LanguageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Languages.
   */
  cursor?: Prisma.LanguageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Languages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Languages.
   */
  skip?: number
  distinct?: Prisma.LanguageScalarFieldEnum | Prisma.LanguageScalarFieldEnum[]
}

/**
 * Language create
 */
export type LanguageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * The data needed to create a Language.
   */
  data?: Prisma.XOR<Prisma.LanguageCreateInput, Prisma.LanguageUncheckedCreateInput>
}

/**
 * Language createMany
 */
export type LanguageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Languages.
   */
  data: Prisma.LanguageCreateManyInput | Prisma.LanguageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Language createManyAndReturn
 */
export type LanguageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * The data used to create many Languages.
   */
  data: Prisma.LanguageCreateManyInput | Prisma.LanguageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Language update
 */
export type LanguageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * The data needed to update a Language.
   */
  data: Prisma.XOR<Prisma.LanguageUpdateInput, Prisma.LanguageUncheckedUpdateInput>
  /**
   * Choose, which Language to update.
   */
  where: Prisma.LanguageWhereUniqueInput
}

/**
 * Language updateMany
 */
export type LanguageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Languages.
   */
  data: Prisma.XOR<Prisma.LanguageUpdateManyMutationInput, Prisma.LanguageUncheckedUpdateManyInput>
  /**
   * Filter which Languages to update
   */
  where?: Prisma.LanguageWhereInput
  /**
   * Limit how many Languages to update.
   */
  limit?: number
}

/**
 * Language updateManyAndReturn
 */
export type LanguageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * The data used to update Languages.
   */
  data: Prisma.XOR<Prisma.LanguageUpdateManyMutationInput, Prisma.LanguageUncheckedUpdateManyInput>
  /**
   * Filter which Languages to update
   */
  where?: Prisma.LanguageWhereInput
  /**
   * Limit how many Languages to update.
   */
  limit?: number
}

/**
 * Language upsert
 */
export type LanguageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * The filter to search for the Language to update in case it exists.
   */
  where: Prisma.LanguageWhereUniqueInput
  /**
   * In case the Language found by the `where` argument doesn't exist, create a new Language with this data.
   */
  create: Prisma.XOR<Prisma.LanguageCreateInput, Prisma.LanguageUncheckedCreateInput>
  /**
   * In case the Language was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LanguageUpdateInput, Prisma.LanguageUncheckedUpdateInput>
}

/**
 * Language delete
 */
export type LanguageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
  /**
   * Filter which Language to delete.
   */
  where: Prisma.LanguageWhereUniqueInput
}

/**
 * Language deleteMany
 */
export type LanguageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Languages to delete
   */
  where?: Prisma.LanguageWhereInput
  /**
   * Limit how many Languages to delete.
   */
  limit?: number
}

/**
 * Language.movies
 */
export type Language$moviesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  where?: Prisma.MovieWhereInput
  orderBy?: Prisma.MovieOrderByWithRelationInput | Prisma.MovieOrderByWithRelationInput[]
  cursor?: Prisma.MovieWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MovieScalarFieldEnum | Prisma.MovieScalarFieldEnum[]
}

/**
 * Language without action
 */
export type LanguageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Language
   */
  select?: Prisma.LanguageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Language
   */
  omit?: Prisma.LanguageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LanguageInclude<ExtArgs> | null
}
